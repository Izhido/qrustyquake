// Copyright (C) 1996-2001 Id Software, Inc.
// Copyright (C) 2002-2009 John Fitzgibbons and others
// GPLv3 See LICENSE for details.

#include "pr_comp.h" // defs shared with qcc
#include "progdefs.q1" // generated by program cdefs

#define MAX_ENT_LEAFS 16
#define EDICT_FROM_AREA(l) STRUCT_FROM_LINK(l,edict_t,area)
#define NEXT_EDICT(e) ((edict_t *)( (byte *)e + pr_edict_size))
#define EDICT_TO_PROG(e) ((byte *)e - (byte *)sv.edicts)
#define PROG_TO_EDICT(e) ((edict_t *)((byte *)sv.edicts + e))
#define G_FLOAT(o) (pr_globals[o])
#define G_INT(o) (*(int *)&pr_globals[o])
#define G_EDICT(o) ((edict_t *)((byte *)sv.edicts+ *(int *)&pr_globals[o]))
#define G_EDICTNUM(o) NUM_FOR_EDICT(G_EDICT(o))
#define G_VECTOR(o) (&pr_globals[o])
#define G_STRING(o) (PR_GetString(*(string_t *)&pr_globals[o]))
#define G_FUNCTION(o) (*(func_t *)&pr_globals[o])
#define E_FLOAT(e,o) (((float*)&e->v)[o])
#define E_INT(e,o) (*(int *)&((float*)&e->v)[o])
#define E_VECTOR(e,o) (&((float*)&e->v)[o])
#define E_STRING(e,o) (PR_GetString(*(string_t *)&((float*)&e->v)[o]))

typedef union eval_s
{
	string_t string;
	float _float;
	float vector[3];
	func_t function;
	int _int;
	int edict;
} eval_t;

typedef struct edict_s
{
	qboolean free;
	link_t area; // linked to a division node or leaf
	int num_leafs;
	short leafnums[MAX_ENT_LEAFS];
	entity_state_t baseline;
	unsigned char alpha; // johnfitz -- hack to support alpha since it's not part of entvars_t
	qboolean sendinterval; // johnfitz -- send time until nextthink to client for better lerp timing
	float freetime; // sv.time when the object was freed
	entvars_t v; // C exported fields from progs
		// other fields from progs come immediately after
} edict_t;

typedef void (*builtin_t)();

extern builtin_t *pr_builtins;
extern dprograms_t *progs;
extern dfunction_t *pr_functions;
extern char *pr_strings;
extern dstatement_t *pr_statements;
extern globalvars_t *pr_global_struct;
extern float *pr_globals; // same as pr_global_struct
extern int pr_edict_size; // in bytes
extern int type_size[8];
extern int pr_numbuiltins;
extern int pr_argc;
extern qboolean pr_trace;
extern dfunction_t *pr_xfunction;
extern int pr_xstatement;
extern unsigned short pr_crc;

void PR_Init();
void PR_ExecuteProgram(func_t fnum);
void PR_LoadProgs();
void PR_Profile_f();
char *PR_GetString(int num);
int PR_SetEngineString(char *s);
int PR_AllocString(int bufferlength, char **ptr);
edict_t *ED_Alloc();
void ED_Free(edict_t *ed);
void ED_Print(edict_t *ed);
void ED_Write(FILE *f, edict_t *ed);
char *ED_ParseEdict(char *data, edict_t *ent);
void ED_WriteGlobals(FILE *f);
void ED_ParseGlobals(char *data);
void ED_LoadFromFile(char *data);
edict_t *EDICT_NUM(int n);
int NUM_FOR_EDICT(edict_t *e);
void PR_RunError(char *error, ...);
void ED_PrintEdicts();
void ED_PrintNum(int ent);
eval_t *GetEdictFieldValue(edict_t *ed, char *field);
